// White space includes space, tab, newline and a comment as '//' followed by any characters to end-of-line

adl             = definition*

definition      = path_name? body

body            = (reference | alias_from | supertype? block? post_body ';' | supertype? block | ';' )

alias_from      = '!' path_name

supertype       =  ':' path_name?

path_name       = ascend* (name (descend name)*)?

ascend          = '.'
descend         = '.'

name            = symbol | integer

// Unicode categories here: \p{L} = any letter, \p{N} = any digit, \p{Mn} = non-spacing mark (accent)
symbol          = [_\p{L}] [_\p{L}\p{N}\p{Mn}]*

integer         = [1-9] [0-9]*

reference       = ('->' | '=>') path_name (';' | block? tentative_assignment ';' | block)

block           = '{' definition* '}'

post_body        = array_indicator assignment? | assignment

array_indicator = '[]'

assignment      = final_assignment | tentative_assignment

final_assignment = '=' value

tentative_assignment = '~=' value

value           = atomic_value | array

array           = '[' (atomic_value (',' atomic_value)? ']'

// If the Variable is a Regular Expression the value is a regexp.
// If the Variable is a Reference, the value is a path_name or object literal.
// Otherwise, the value is defined by the Syntax of the variable (regexp_match).
// See builtin.adl for the syntax of values of builtin variables.
atomic_value    = regexp | path_name | object_literal | regexp_match

object_literal  = supertype block? assignment?

// Above here, white-space is free. Below here, no implicit white-space is allowed.

// The syntax for a Regular Expression is not regular, so it must be built-in.
regexp          = '/' regexp_sequence '/'

regexp_sequence = regexp_alternate ('|' regexp_alternate)*

regexp_alternate = regexp_atom*

regexp_atom     = ( regexp_char | regexp_class | regexp_group) ( '*' | '+' | '?' )?

regexp_char     = '\\s'
                | '\\' [0-3] [0-7] [0-7]
                | '\\x' [0-9A-F] [0-9A-F]
                | '\\u' [0-9A-F] [0-9A-F] [0-9A-F] [0-9A-F]
                | '\\' [pP] '{' [A-Za-z_]+ '}'
                | '\\' [0befntr\\*+?()|/\[]
                | [^*+?()|/\[ ]

regexp_class    = '[' '^'? '-'? regexp_class_part+ ']'

regexp_class_part = !']' regexp_class_char '-' !']' regexp_class_char
                | !']' regexp_class_char

regexp_class_char = !'-' regexp_char
                | [+*?()/|]

regexp_group    = '(' regexp_group_type? regexp_sequence ')'

regexp_group_type = regexp_group_capture | regexp_negative_lookahead

regexp_negative_lookahead '?!'

regexp_group_capture = '?<' [_\p{L}\p{D}]+ '>'
